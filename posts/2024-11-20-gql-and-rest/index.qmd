---
title: REST API 和 GraphQL API的异同？
author: Shixiang Wang
date: 2024-11-20
categories: [Web-dev, note]
draft: false
description: ''

toc: true

format:
  html:
    code-fold: false
    code-overflow: wrap
    code-tools: false
---

在学习的过程中有该疑问，询问 AI 和记录下。

> From Kimi

REST API 和 GraphQL API 都是客户端与服务器交互的方式，但它们在设计和数据交换格式上有显著的不同。以下是它们的一些主要异同点：

### 相同点：

1. **客户端-服务器模型**：两者都遵循客户端-服务器架构，客户端发送请求，服务器处理请求并返回响应。
2. **HTTP协议**：两者通常都使用HTTP协议进行通信，尽管GraphQL也可以使用其他协议。
3. **状态无关性**：每个请求都应该是独立的，不依赖于之前的请求状态。
4. **使用JSON**：两者通常使用JSON格式来序列化数据，使其易于在客户端和服务器之间传输。

### 不同点：

1. **数据请求方式**：
   - **REST**：客户端请求静态定义的资源，通常通过URL路径来指定。每个资源都有一个固定的端点（Endpoint），客户端请求整个资源。
   - **GraphQL**：客户端通过一个端点发送查询请求，可以精确指定需要哪些数据。GraphQL服务器返回客户端请求的确切数据结构。

2. **数据结构**：
   - **REST**：数据通常以资源集合的形式提供，如列表或单个资源。资源通常包含客户端可能不需要的额外数据。
   - **GraphQL**：数据以类型系统的形式提供，客户端可以请求它们需要的确切数据结构，减少了不必要的数据传输。

3. **端点数量**：
   - **REST**：通常需要多个端点来处理不同的资源和操作（如获取列表、创建、更新、删除）。
   - **GraphQL**：通常只需要一个端点来处理所有类型的请求，客户端在查询中指定所需的操作。

4. **版本控制**：
   - **REST**：版本控制通常通过URL（如 `/v1/users`）或请求头来管理。
   - **GraphQL**：可以在同一个查询中处理多个版本的数据，不需要额外的端点。

5. **性能**：
   - **REST**：可能需要多个请求来获取相关数据，这可能导致额外的延迟和带宽使用。
   - **GraphQL**：由于客户端可以请求所需的确切数据，通常可以减少请求数量和数据传输量。

6. **灵活性**：
   - **REST**：设计时需要预定义资源和操作，这可能限制了API的灵活性。
   - **GraphQL**：提供了更高的灵活性，因为客户端可以构建几乎任何类型的查询。

7. **复杂性**：
   - **REST**：API设计相对简单，易于理解和实现。
   - **GraphQL**：引入了类型系统和自己的查询语言，可能需要更多的学习和实现工作。

8. **工具和生态系统**：
   - **REST**：有广泛的工具和库支持，社区和生态系统非常成熟。
   - **GraphQL**：相对较新，但正在迅速增长，拥有越来越多的工具和库。

总的来说，REST API 适合于结构化和标准化的API设计，而 GraphQL API 适合于需要高度灵活和优化数据传输的应用程序。选择哪种API取决于项目需求、团队熟悉度以及预期的客户端-服务器交互模式。
