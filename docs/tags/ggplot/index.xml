<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ggplot on ShixiangWang
(王诗翔)</title>
    <link>/tags/ggplot/</link>
    <description>Recent content in ggplot on ShixiangWang
(王诗翔)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/ggplot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ggplot2在R包开发中的使用</title>
      <link>/blog/ggplot2-in-r-package/</link>
      <pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/ggplot2-in-r-package/</guid>
      <description>没有特别系统的学习 tidy evaluation 这方面的高级操作，最近有空准备补一补，学习下这方面的知识。
原英文：https://github.com/tidyverse/ggplot2/blob/HEAD/vignettes/ggplot2-in-packages.Rmd
这篇文章是为在包代码中使用ggplot2的包开发人员准备的。在撰写本文时，ggplot2涉及在CRAN上的超过2,000个包和其他地方的更多包！在包中使用ggplot2编程增加了几个约束，特别是如果你想将包提交给CRAN。尤其是在R包中编程改变了从ggplot2引用函数的方式，以及在aes()和vars()中使用ggplot2的非标准求值的方式。
引用ggplot2函数与引用其他包类似，你需要在DESCRIPTION文件下的Imports条目下列出ggplot2，并使用::访问ggplot2提供的函数。（例如， ggplot2::function_name）：
mpg_drv_summary &amp;lt;- function() {ggplot2::ggplot(ggplot2::mpg) + ggplot2::geom_bar(ggplot2::aes(x = .data$drv)) + ggplot2::coord_flip()}如果你经常使用ggplot2，你可能希望将ggplot2的多个函数写入NAMESPACE文件。如果你使用roxygen2，那么你可以利用注释代码块 #&#39; @importFrom ggplot2 &amp;lt;one or more object names&amp;gt; （注意，这对数据集mpg不起作用）。
#&amp;#39; @importFrom ggplot2 ggplot aes geom_bar coord_flipmpg_drv_summary &amp;lt;- function() {ggplot(ggplot2::mpg) + geom_bar(aes(x = drv)) + coord_flip()}即使你的包里使用了很多的ggplot2函数，将ggplot2列入Depends条目或者将它整个导入NAMESPACE（例如，通过#&#39; @import ggplot2）都是不明智的。将ggplot2列入Depends会让你的包在被加载/测试的同时加载ggplot2。这会让其他想要使用你包的人通过::使用你的函数而无需加载它。同样地，导入ggplot2全部450个导出对象到你的命名空间会让分离你的包和ggplot2包的责任变得困难，特别是读者会搞不清这些函数到底来自哪里。
我个人碰到过很多这种情况。有时候在开发R包时为了保证正常运行，不得不将依赖包列入Depdens。实际上，如上所说，这一方面会让使用者懵逼，另一方面会造成开发病毒式感染，既不方便调试错误，想要使用你的包开发的人又不得不将你的包列入Depends。
在包函数中使用 aes() 和 vars()为了使用ggplot2创建图形，你很可能至少要使用一次aes()函数。如果你的图形使用了分面操作，你可能也会使用vars()用来指向绘图数据。而这两个函数都使用了非标准计算，如果你在包中直接使用它，后面再CMD check的使用会引入一个note。</description>
    </item>
    
    <item>
      <title>ggplot结合点图与箱线图的问题与解决</title>
      <link>/blog/ggplot-overlay-points-on-boxplot-qa/</link>
      <pubDate>Wed, 08 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/ggplot-overlay-points-on-boxplot-qa/</guid>
      <description>最近在使用ggplot2对箱线图叠加点图是发现奇怪的现象，只要我改变点的形状，绘图就出问题了。
下面我通过一个简单的示例展示这个问题。
我们先生成一组简单的数据，并绘制一个正常的叠加图：
library(ggplot2)library(dplyr)head(mtcars)## mpg cyl disp hp drat wt qsec vs am gear carb## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1## Hornet 4 Drive 21.4 6 258 110 3.</description>
    </item>
    
    <item>
      <title>ggplot构建新图形元素</title>
      <link>/blog/ggplot-build-new-object/</link>
      <pubDate>Mon, 09 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/blog/ggplot-build-new-object/</guid>
      <description>2021/05/24 19:35
 原文：https://bookdown.org/rdpeng/RProgDA/building-new-graphical-elements.html
 由ggplot构造的数据图中的关键元素包括geoms（几何对象）和stats（统计变换）。事实上，ggplot2包具有强大的功能，允许用户制作各种有趣而丰富的数据图形。这些图形可以通过组合调用各种geom_*和stat_*函数(以及其他类函数)来实现。
为什么要构造新的图形元素？
  实现ggplot2目前不存在的特性。
  简化复杂的工作流。如果你总是发现自己在用重复的代码绘制类似的图形元素。
  创建新的geoms和stats可以简化代码，让用户轻松调整情节的某些元素，而不必每次都费劲地处理整个代码。
构造一个geom ggplot2中的新geoms继承自一个名为Geom的顶级类，并使用两步流程构造：
  ggproto()函数用于构造一个与新的geom对应的新类。这个新类指定了许多属性和函数，这些属性和函数描述了如何在图上绘制数据。
  geom_*函数被构造为标准函数。这个函数返回一个层，该层可以添加到使用ggplot()函数创建的plot中。
  新的geom类的基本设置如下所示：
GeomNEW &amp;lt;- ggproto(&amp;#34;GeomNEW&amp;#34;, Geom, required_aes = &amp;lt;a character vector of required aesthetics&amp;gt;, default_aes = aes(&amp;lt;default values for certain aesthetics&amp;gt;), draw_key = &amp;lt;a function used to draw the key in the legend&amp;gt;, draw_panel = function(data, panel_scales, coord) { ## 返回一个grid grob对象的函数 ## 是绘图真正工作的地方 } ) 所需的美学映射应该很简单——例如，如果你的新geom生成了一种特殊的散点图，那么你可能需要x和y映射。美学映射的默认值可以包括绘图符号如形状、颜色等内容。</description>
    </item>
    
  </channel>
</rss>
