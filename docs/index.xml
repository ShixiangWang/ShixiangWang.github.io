<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Reasoning</title>
<link>https://shixiangwang.github.io/index.html</link>
<atom:link href="https://shixiangwang.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Reasoning is a blog dedicated to exploring the intersection of data science, bioinformatics, and personal insights.</description>
<generator>quarto-1.3.361</generator>
<lastBuildDate>Wed, 06 Dec 2023 16:00:00 GMT</lastBuildDate>
<item>
  <title>E pluribus unum: From Complexity, Universality</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-12-07-e-pluribus-unum/index.html</link>
  <description><![CDATA[ 




<p>标题是陶哲轩于 2012 年发表的<a href="https://direct.mit.edu/daed/article/141/3/23/27037/E-pluribus-unum-From-Complexity-Universality">一篇论文</a>题目，表达了从多样性、复杂性中产生统一、普遍性的意念。这可以涉及到社会、科学、文化或其他领域，强调在多样性和复杂性中寻找普遍性原则或价值观。</p>
<blockquote class="blockquote">
<p>探究宇宙中的秩序和混沌一直是科学研究的核心命题。陶哲轩教授的这篇洞察性文章引领我们进入普适的世界——一个展现了如何从错综复杂的微观动态系统中抽象出简明的宏观规律的奇妙领域。从统计学的经典规律到物理学中的相变现象，从自然数序列的神秘规律到量子力学的精确预测，普适性作为一种被广泛记录和验证的模式在各种不同尺度和领域中展现了其惊人的一致性。然而，尽管这些规律已被实证学科反复确认，但对于普适性的严格数学基础仍存在着诸多未知之谜。</p>
</blockquote>
<p>感觉这就是我一直想要追求的科研道路，但如何从细节入手，进入这一方世界，当前的我还一无所知。</p>
<p>自然是一朵变幻莫测的云，永远如一，又从不相同。 —— Ralph Waldo Emerson，《历史》(1841年)</p>



 ]]></description>
  <category>random</category>
  <guid>https://shixiangwang.github.io/posts/2023-12-07-e-pluribus-unum/index.html</guid>
  <pubDate>Wed, 06 Dec 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>从 Faker 夺冠讨论竞争与热爱</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-11-21-talking-from-faker/index.html</link>
  <description><![CDATA[ 




<p>好的想法需要记录，在这里动笔前，昨天睡前的好想法差点从指缝中溜走。</p>
<hr>
<p>Faker，闪耀英雄联盟十年的职业选手，带领 T1 再次登上王座。 这是他的第 4 座世界赛冠军奖杯，但他离上一次登顶已经过去很多年了。 想要回忆，都已经得翻过我人生几千天的篇章。在那个懵懂和充满斗气的年代， 他也是青涩，却以高超的技巧以魔王的姿态统治了游戏中的王朝。</p>
<p>但他又再次登顶了，当众多英雄折戟沉沙、黯然退出，为什么他还在坚持？ 为什么在沦入尘沙时坚持，为什么在近年当千年老二坚持？奶奶对他说， 要做便做到最好。他早已做到最好，为什么还在坚持？</p>
<p>我思考了很久。只有热爱，才能解释。</p>
<p>在越加竞争的世界里，我曾以为科研工作是一个宁静的港湾，但很显然，飓风已成，一切都将被席卷。 当资源的博奕无法避免，个人而言，躺平是最下层的解法。 为什么今年的比赛 Faker 带领的 T1 能够把把将 LPL 战队击穿，如人机一般？ 我在一个知乎的帖子里看到了最认同的解析：<a href="https://www.zhihu.com/question/630835967/answer/3294626092">“不惧强度对抗”</a>。 「不怕摩擦，不怕双方接触，寻求双方对抗。」在对抗中寻找战机和赛果。</p>
<p>未战先怯，败亡之道。</p>
<p>这狠狠地击中了我近年的“科研心态”。个人独立独行时，我们天然地寻求庇护之所，以求遮风挡雨、得以存活。 我们把对思想的追求降低到对生活的满足，就此沉沦。工作/事业，绝不会因为你把它当作一份工作而出色，它只会 因为你的热爱，你灌注的思想情绪而出彩。</p>
<p>固然，世界，特别是周遭的环境变化太大、压力太巨，但追求之心、努力之行不该有所松懈。不要让任何的标签定义，不要让任何的时间限制，不要让任何的思想束缚，一步一步、锤炼再锤炼、博弈再博弈。</p>
<p>与天斗，其乐无穷；与地斗，其乐无穷；与人斗，其乐无穷。</p>



 ]]></description>
  <category>thought</category>
  <guid>https://shixiangwang.github.io/posts/2023-11-21-talking-from-faker/index.html</guid>
  <pubDate>Mon, 20 Nov 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>谈谈使用过的代码编辑器</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-11-15-talk-about-ides/index.html</link>
  <description><![CDATA[ 




<p>最近在使用 JupyterLab 时感觉受挫，想简单总结下自己这些年使用过的代码编辑器（有较长的使用时间）。</p>
<p>最开始接触的应该是 Sublime text3，简单、轻量、速度响应快，缺点是要自己搞定盗版问题、要自己配置、装插件等。</p>
<p>后面大量使用 R 和利用 R 开发，所以 RStudio 和 RStudio Server 使用非常多，它可以系统解决利用 R 进行的一系列数据处理和开发工作。缺点是单线程、有时候出问题会卡得很、与其他编程语言几乎很难协同，包括我常用的 Bash 和偶尔用的 Python，这类体验感很不好。</p>
<p>再后面有用过 Jupyter 笔记本，优点是简约轻便，它对 Python 的支持比较好，其他比较烂，界面和导航不太行，我近期尝试部署 JupyterLab 后发现对插件的支持体验不是很理想，然后插件对 R 的支持比较烂。</p>
<p>还用过 JetBrains 的一系列编辑器，包括支持 Python、Go等等的不同软件名称，但基本框架是一样的，后面在 IDEA 中都可以进行支持，优点是交互感好、界面专业、插件稳定好用、非常适合开发，缺点是不太适合数据分析探索类工作，也比较笨重。如果是学生/老师用户可以免费使用。</p>
<p>全部使用过的所有编辑器中综合体验感、性能、特性等比较完美的是 VS Code，不愧是大厂出产的产品，这些年陆续间歇在用，功能演进频繁但不失稳定，目前包括 R、Python、Jupyter的支持都比较好，更不说其他常用编程了。缺点是 VS Code 在 R 方面的专业性没有 RStudio 强（特别是图像预览的方便程度），另外界面有时候个人使用起来不是很喜欢（相比于 JetBrains 产品）。</p>
<p>当前还有一些新的产品在推动编辑器的发展，包括JB 的 Fleet，我觉得非常有前景。</p>
<p>当然了，终端上用过 Vim，它基本是命令行的无冕之王，虽然我极少在终端写代码，但用它基本已经满足了。之前还学习过 Vim 和相关配置、包括 Emacs，但实际上个人的使用偏好和职业领域导致这一块的使用极少有所进展，只是满足偶尔的编辑需求。而这部分需求，现状VS Code 都是可以替代的。</p>
<p>综上看，如果是从事与我类似的数据科学工作和开发的读者朋友，优先选择 VS Code 和 RStudio 是比较好的选择。</p>



 ]]></description>
  <category>R</category>
  <category>bioinformatics</category>
  <guid>https://shixiangwang.github.io/posts/2023-11-15-talk-about-ides/index.html</guid>
  <pubDate>Tue, 14 Nov 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>随想</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-11-14-random-thoughts/index.html</link>
  <description><![CDATA[ 




<p>没有问题只有目标的数据分析，就像人有大脑却缺乏灵魂。</p>



 ]]></description>
  <category>random</category>
  <guid>https://shixiangwang.github.io/posts/2023-11-14-random-thoughts/index.html</guid>
  <pubDate>Mon, 13 Nov 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>SRA 测序数据下载和处理三部曲</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-11-13-download-and-prepare-sra-data/index.html</link>
  <description><![CDATA[ 




<p>这里简单记录和备忘下下载和预处理 SRA 数据我常用的三个基本步骤。</p>
<section id="依赖准备" class="level2">
<h2 class="anchored" data-anchor-id="依赖准备">依赖准备</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> bioconda <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> conda-forge parallel-fastq-dump <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sra-tools&gt;=3.0.0'</span> fastp</span></code></pre></div>
</section>
<section id="步骤" class="level2">
<h2 class="anchored" data-anchor-id="步骤">步骤</h2>
<ol type="1">
<li>下载</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">prefetch</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-c</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--max-size</span> 100GB <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-C</span> yes <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> yes <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O</span> . <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> SRR8670672</span></code></pre></div>
<ol start="2" type="1">
<li>转换数据格式为 FASTQ</li>
</ol>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">parallel-fastq-dump</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> 20 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O</span> fq/ <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--split-3</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--gzip</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-s</span> SRR8670672</span></code></pre></div>
<ol start="3" type="1">
<li>预处理 FASTQ 文件</li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">fastp</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> fq/SRR8670672_1.fastq.gz <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-I</span> fq/SRR8670672_2.fastq.gz <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> output/SRR8670672_1.fastq.gz <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-O</span> output/SRR8670672_2.fastq.gz <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> output/SRR8670672.html <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-j</span> output/SRR8670672.json <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--thread</span> 16 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--dont_overwrite</span></span></code></pre></div>
<p>如果多个文件还可以结合 <code>multiqc</code>。</p>


</section>

 ]]></description>
  <category>note</category>
  <category>bioinformatics</category>
  <guid>https://shixiangwang.github.io/posts/2023-11-13-download-and-prepare-sra-data/index.html</guid>
  <pubDate>Sun, 12 Nov 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>dont forget</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-10-29-dont-forget/index.html</link>
  <description><![CDATA[ 




<p>不要忘记，有一个诺贝尔奖的梦。</p>
<p>不要忘记，最多也就剩下四十余年。</p>



 ]]></description>
  <category>random</category>
  <guid>https://shixiangwang.github.io/posts/2023-10-29-dont-forget/index.html</guid>
  <pubDate>Sat, 28 Oct 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>南京行记 两首</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-10-27-revist-nanjing/index.html</link>
  <description><![CDATA[ 




<center>
<section id="其一-重访南京有感" class="level3">
<h3 class="anchored" data-anchor-id="其一-重访南京有感">其一 重访南京有感</h3>
</section></center>
<p><br></p>
<center>
<p>烟水近，城镇明，高楼须弥作蝼蚁。</p>
<p>夜半独飞落江宁，驰霄横度三千里。</p>
<p>旧都印，故金陵，六朝风流休说起。</p>
夫子庙头看古今，忆往年书生意气。
</center>
<center>
<img src="https://shixiangwang.github.io/posts/2023-10-27-revist-nanjing/rv_nj_1.jpg" style="width:50.0%;height:50.0%">
</center>
<center>

<section id="其二-足踏秦淮有记" class="level3">
<h3 class="anchored" data-anchor-id="其二-足踏秦淮有记">其二 足踏秦淮有记</h3>
</section></center>
<p><br></p>
<center>
<p>行路迟迟眼欲呆，金陵小巷赋文才。</p>
<p>流水车龙听钟鼓，穿街梧桐掩楼牌。</p>
<p>集庆门接迎凤道，长干桥通雨花台。</p>
<p>秦淮酒家今安在，旧里新村说不来。</p>
</center>
<center>
<img src="https://shixiangwang.github.io/posts/2023-10-27-revist-nanjing/rv_nj_2.jpg" style="width:50.0%;height:50.0%">
</center>




 ]]></description>
  <category>诗</category>
  <guid>https://shixiangwang.github.io/posts/2023-10-27-revist-nanjing/index.html</guid>
  <pubDate>Thu, 26 Oct 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>聊聊开源协议：我们可以免费使用开源软件吗？</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-10-19-can-i-use-open-source-tools-for-free/index.html</link>
  <description><![CDATA[ 




<p>答案是 YES!!!</p>
<p>逐步了解开源的朋友，可能会对开源协议产生困惑。既然协议中有那么多的限定，我们是不是在一些情况下无法使用他们呢？</p>
<p>如果是商业行为的使用（用别人的东西赚钱不应该遵守一些条条框框吗？），咱们暂且不论。作为个人使用者，我们首先需要区分“使用软件”和“改写软件”是两个完全不同的行为，而开源协议中各种条目都是写给那些改写它的人看的！</p>
<div style="background-color: white; padding: 0px;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-10-19-can-i-use-open-source-tools-for-free/https:/www.ruanyifeng.com/blogimg/asset/201105/free_software_licenses.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">来源：https://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</figcaption>
</figure>
</div>
</div>
<blockquote class="blockquote">
<p>注意这里的第一出发点就是是否发生了“改写”行为。</p>
</blockquote>
<p>简单说就是不改源码，所有开源协议都支持写闭源软件。</p>
<p>我之前也很困惑，所以看过很多介绍。主要是我们混淆了修改别人的代码和使用别人代码，开源协议限制的是对别人代码的修改（包括在你自己的软件包里拷贝了他人的源码），不限制后者。</p>
<p>一般我们做数据分析，喜欢拷贝和利用已有的代码，这就是“改写”行为。假设我们不遵守相关的协议（比如有些博客要求你放上博客地址和作者等等），那么就违规啦。但是，如果你是看着别人的思路或代码自己完全重新写的， 就不是“改写”行为了！所以，不难发现，如果存在违规，这种除了本人其他人是没法分辨的。当然了，一般网上公开的代码也不存在任何的协议，以及常见的代码很难溯源和追责，所以我们不需要考虑这些问题，根据自己情况使用就行。</p>



 ]]></description>
  <category>thought</category>
  <guid>https://shixiangwang.github.io/posts/2023-10-19-can-i-use-open-source-tools-for-free/index.html</guid>
  <pubDate>Wed, 18 Oct 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>结合 quarto 出版系统和 webr 技术</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-10-09-webr-in-quarto/index.html</link>
  <description><![CDATA[ <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs/loader.js"></script><script type="module" id="webr-monaco-editor-init">

  // Configure the Monaco Editor's loader
  require.config({
    paths: {
      'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.43.0/min/vs'
    }
  });
</script><p>这是一个简单的例子，直接通过浏览器运行 <a href="https://docs.r-wasm.org/webr/latest/">webr 技术</a>来实时运行 R 代码。你还可以实时修改代码进行交互式探索！</p>
<button class="btn btn-default btn-webr" disabled="" type="button" id="webr-run-button-1">🟡 Loading
  webR...</button>
<div id="webr-editor-1"></div>
<div id="webr-code-output-1" aria-live="assertive">
  <pre style="visibility: hidden"></pre>
</div>
<script type="module">
  // Retrieve webR code cell information
  const runButton = document.getElementById("webr-run-button-1");
  const outputDiv = document.getElementById("webr-code-output-1");
  const editorDiv = document.getElementById("webr-editor-1");

  // Add a light grey outline around the code editor
  editorDiv.style.border = "1px solid #eee";

  // Load the Monaco Editor and create an instance
  let editor;
  require(['vs/editor/editor.main'], function () {
    editor = monaco.editor.create(editorDiv, {
      value: `fit = lm(mpg ~ am, data = mtcars)
summary(fit)`,
      language: 'r',
      theme: 'vs-light',
      automaticLayout: true,           // TODO: Could be problematic for slide decks
      scrollBeyondLastLine: false,
      minimap: {
        enabled: false
      },
      fontSize: '17.5rem',               // Bootstrap is 1 rem
      renderLineHighlight: "none",     // Disable current line highlighting
      hideCursorInOverviewRuler: true  // Remove cursor indictor in right hand side scroll bar
    });

    // Dynamically modify the height of the editor window if new lines are added.
    let ignoreEvent = false;
    const updateHeight = () => {
      const contentHeight = editor.getContentHeight();
      // We're avoiding a width change
      //editorDiv.style.width = `${width}px`;
      editorDiv.style.height = `${contentHeight}px`;
      try {
        ignoreEvent = true;

        // The key to resizing is this call
        editor.layout();
      } finally {
        ignoreEvent = false;
      }
    };

    // Helper function to check if selected text is empty
    function isEmptyCodeText(selectedCodeText) {
      return (selectedCodeText === null || selectedCodeText === undefined || selectedCodeText === "");
    }

    // Registry of keyboard shortcuts that should be re-added to each editor window
    // when focus changes.
    const addWebRKeyboardShortCutCommands = () => {
      // Add a keydown event listener for Shift+Enter to run all code in cell
      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {

        // Retrieve all text inside the editor
        executeCode(editor.getValue());
      });

      // Add a keydown event listener for CMD/Ctrl+Enter to run selected code
      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, () => {

        // Get the selected text from the editor
        const selectedText = editor.getModel().getValueInRange(editor.getSelection());
        // Check if no code is selected
        if (isEmptyCodeText(selectedText)) {
          // Obtain the current cursor position
          let currentPosition = editor.getPosition();
          // Retrieve the current line content
          let currentLine = editor.getModel().getLineContent(currentPosition.lineNumber);

          // Propose a new position to move the cursor to
          let newPosition = new monaco.Position(currentPosition.lineNumber + 1, 1);

          // Check if the new position is beyond the last line of the editor
          if (newPosition.lineNumber > editor.getModel().getLineCount()) {
            // Add a new line at the end of the editor
            editor.executeEdits("addNewLine", [{
            range: new monaco.Range(newPosition.lineNumber, 1, newPosition.lineNumber, 1),
            text: "\n", 
            forceMoveMarkers: true,
            }]);
          }
          
          // Run the entire line of code.
          executeCode(currentLine);

          // Move cursor to new position
          editor.setPosition(newPosition);
        } else {
          // Code to run when Ctrl+Enter is pressed with selected code
          executeCode(selectedText);
        }
      });
    }

    // Register an on focus event handler for when a code cell is selected to update
    // what keyboard shortcut commands should work.
    // This is a workaround to fix a regression that happened with multiple
    // editor windows since Monaco 0.32.0 
    // https://github.com/microsoft/monaco-editor/issues/2947
    editor.onDidFocusEditorText(addWebRKeyboardShortCutCommands);

    // Register an on change event for when new code is added to the editor window
    editor.onDidContentSizeChange(updateHeight);

    // Manually re-update height to account for the content we inserted into the call
    updateHeight();
  });

  // Function to execute the code (accepts code as an argument)
  async function executeCode(codeToRun) {
    // Disable run button for code cell active
    runButton.disabled = true;

    // Disallowing execution of other code cells
    document.querySelectorAll(".btn-webr").forEach((btn) => {
      btn.disabled = true;
    });

    // Emphasize the active code cell
    runButton.innerHTML = '<i class="fa-solid fa-spinner fa-spin" style="color: #7894c4;"></i> <span>Run Code</span>';

    // Create a canvas variable for graphics
    let canvas = undefined;

    // Initialize webR
    await globalThis.webR.init();

    // Setup a webR canvas by making a namespace call into the {webr} package
    await webR.evalRVoid("webr::canvas(width=504, height=360)");

    // Capture output data from evaluating the code
    const result = await webRCodeShelter.captureR(codeToRun, {
      withAutoprint: true,
      captureStreams: true,
      captureConditions: false//,
      // env: webR.objs.emptyEnv, // maintain a global environment for webR v0.2.0
    });

    // Start attempting to parse the result data
    try {

      // Stop creating images
      await webR.evalRVoid("dev.off()");

      // Merge output streams of STDOUT and STDErr (messages and errors are combined.)
      const out = result.output.filter(
        evt => evt.type == "stdout" || evt.type == "stderr"
      ).map((evt) => evt.data).join("\n");

      // Clean the state
      const msgs = await webR.flush();

      // Output each image stored
      msgs.forEach(msg => {
        // Determine if old canvas can be used or a new canvas is required.
        if (msg.type === 'canvas'){
          // Add image to the current canvas
          if (msg.data.event === 'canvasImage') {
            canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
          } else if (msg.data.event === 'canvasNewPage') {
            // Generate a new canvas element
            canvas = document.createElement("canvas");
            canvas.setAttribute("width", 2 * 504);
            canvas.setAttribute("height", 2 * 360);
            canvas.style.width = "700px";
            canvas.style.display = "block";
            canvas.style.margin = "auto";
          }
        }
      });

      // Nullify the outputDiv of content
      outputDiv.innerHTML = "";

      // Design an output object for messages
      const pre = document.createElement("pre");
      if (/\S/.test(out)) {
        // Display results as text
        const code = document.createElement("code");
        code.innerText = out;
        pre.appendChild(code);
      } else {
        // If nothing is present, hide the element.
        pre.style.visibility = "hidden";
      }
      outputDiv.appendChild(pre);

      // Place the graphics on the canvas
      if (canvas) {
        const p = document.createElement("p");
        p.appendChild(canvas);
        outputDiv.appendChild(p);
      }
    } finally {
      // Clean up the remaining code
      webRCodeShelter.purge();
    }

    // Switch to allowing execution of code
    document.querySelectorAll(".btn-webr").forEach((btn) => {
      btn.disabled = false;
    });

    // Revert to the initial code cell state
    runButton.innerHTML = '<i class="fa-solid fa-play" style="color: #0d9c29;"></i> <span>Run Code</span>';
  }

  // Add a click event listener to the run button
  runButton.onclick = function () {
    executeCode(editor.getValue());
  };
</script><button class="btn btn-default btn-webr" disabled="" type="button" id="webr-run-button-2">🟡 Loading
  webR...</button>
<div id="webr-editor-2"></div>
<div id="webr-code-output-2" aria-live="assertive">
  <pre style="visibility: hidden"></pre>
</div>
<script type="module">
  // Retrieve webR code cell information
  const runButton = document.getElementById("webr-run-button-2");
  const outputDiv = document.getElementById("webr-code-output-2");
  const editorDiv = document.getElementById("webr-editor-2");

  // Add a light grey outline around the code editor
  editorDiv.style.border = "1px solid #eee";

  // Load the Monaco Editor and create an instance
  let editor;
  require(['vs/editor/editor.main'], function () {
    editor = monaco.editor.create(editorDiv, {
      value: `par(bg = "#f7f7f7")

plot(x = mtcars$mpg, y = mtcars$am)`,
      language: 'r',
      theme: 'vs-light',
      automaticLayout: true,           // TODO: Could be problematic for slide decks
      scrollBeyondLastLine: false,
      minimap: {
        enabled: false
      },
      fontSize: '17.5rem',               // Bootstrap is 1 rem
      renderLineHighlight: "none",     // Disable current line highlighting
      hideCursorInOverviewRuler: true  // Remove cursor indictor in right hand side scroll bar
    });

    // Dynamically modify the height of the editor window if new lines are added.
    let ignoreEvent = false;
    const updateHeight = () => {
      const contentHeight = editor.getContentHeight();
      // We're avoiding a width change
      //editorDiv.style.width = `${width}px`;
      editorDiv.style.height = `${contentHeight}px`;
      try {
        ignoreEvent = true;

        // The key to resizing is this call
        editor.layout();
      } finally {
        ignoreEvent = false;
      }
    };

    // Helper function to check if selected text is empty
    function isEmptyCodeText(selectedCodeText) {
      return (selectedCodeText === null || selectedCodeText === undefined || selectedCodeText === "");
    }

    // Registry of keyboard shortcuts that should be re-added to each editor window
    // when focus changes.
    const addWebRKeyboardShortCutCommands = () => {
      // Add a keydown event listener for Shift+Enter to run all code in cell
      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {

        // Retrieve all text inside the editor
        executeCode(editor.getValue());
      });

      // Add a keydown event listener for CMD/Ctrl+Enter to run selected code
      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, () => {

        // Get the selected text from the editor
        const selectedText = editor.getModel().getValueInRange(editor.getSelection());
        // Check if no code is selected
        if (isEmptyCodeText(selectedText)) {
          // Obtain the current cursor position
          let currentPosition = editor.getPosition();
          // Retrieve the current line content
          let currentLine = editor.getModel().getLineContent(currentPosition.lineNumber);

          // Propose a new position to move the cursor to
          let newPosition = new monaco.Position(currentPosition.lineNumber + 1, 1);

          // Check if the new position is beyond the last line of the editor
          if (newPosition.lineNumber > editor.getModel().getLineCount()) {
            // Add a new line at the end of the editor
            editor.executeEdits("addNewLine", [{
            range: new monaco.Range(newPosition.lineNumber, 1, newPosition.lineNumber, 1),
            text: "\n", 
            forceMoveMarkers: true,
            }]);
          }
          
          // Run the entire line of code.
          executeCode(currentLine);

          // Move cursor to new position
          editor.setPosition(newPosition);
        } else {
          // Code to run when Ctrl+Enter is pressed with selected code
          executeCode(selectedText);
        }
      });
    }

    // Register an on focus event handler for when a code cell is selected to update
    // what keyboard shortcut commands should work.
    // This is a workaround to fix a regression that happened with multiple
    // editor windows since Monaco 0.32.0 
    // https://github.com/microsoft/monaco-editor/issues/2947
    editor.onDidFocusEditorText(addWebRKeyboardShortCutCommands);

    // Register an on change event for when new code is added to the editor window
    editor.onDidContentSizeChange(updateHeight);

    // Manually re-update height to account for the content we inserted into the call
    updateHeight();
  });

  // Function to execute the code (accepts code as an argument)
  async function executeCode(codeToRun) {
    // Disable run button for code cell active
    runButton.disabled = true;

    // Disallowing execution of other code cells
    document.querySelectorAll(".btn-webr").forEach((btn) => {
      btn.disabled = true;
    });

    // Emphasize the active code cell
    runButton.innerHTML = '<i class="fa-solid fa-spinner fa-spin" style="color: #7894c4;"></i> <span>Run Code</span>';

    // Create a canvas variable for graphics
    let canvas = undefined;

    // Initialize webR
    await globalThis.webR.init();

    // Setup a webR canvas by making a namespace call into the {webr} package
    await webR.evalRVoid("webr::canvas(width=504, height=360)");

    // Capture output data from evaluating the code
    const result = await webRCodeShelter.captureR(codeToRun, {
      withAutoprint: true,
      captureStreams: true,
      captureConditions: false//,
      // env: webR.objs.emptyEnv, // maintain a global environment for webR v0.2.0
    });

    // Start attempting to parse the result data
    try {

      // Stop creating images
      await webR.evalRVoid("dev.off()");

      // Merge output streams of STDOUT and STDErr (messages and errors are combined.)
      const out = result.output.filter(
        evt => evt.type == "stdout" || evt.type == "stderr"
      ).map((evt) => evt.data).join("\n");

      // Clean the state
      const msgs = await webR.flush();

      // Output each image stored
      msgs.forEach(msg => {
        // Determine if old canvas can be used or a new canvas is required.
        if (msg.type === 'canvas'){
          // Add image to the current canvas
          if (msg.data.event === 'canvasImage') {
            canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
          } else if (msg.data.event === 'canvasNewPage') {
            // Generate a new canvas element
            canvas = document.createElement("canvas");
            canvas.setAttribute("width", 2 * 504);
            canvas.setAttribute("height", 2 * 360);
            canvas.style.width = "700px";
            canvas.style.display = "block";
            canvas.style.margin = "auto";
          }
        }
      });

      // Nullify the outputDiv of content
      outputDiv.innerHTML = "";

      // Design an output object for messages
      const pre = document.createElement("pre");
      if (/\S/.test(out)) {
        // Display results as text
        const code = document.createElement("code");
        code.innerText = out;
        pre.appendChild(code);
      } else {
        // If nothing is present, hide the element.
        pre.style.visibility = "hidden";
      }
      outputDiv.appendChild(pre);

      // Place the graphics on the canvas
      if (canvas) {
        const p = document.createElement("p");
        p.appendChild(canvas);
        outputDiv.appendChild(p);
      }
    } finally {
      // Clean up the remaining code
      webRCodeShelter.purge();
    }

    // Switch to allowing execution of code
    document.querySelectorAll(".btn-webr").forEach((btn) => {
      btn.disabled = false;
    });

    // Revert to the initial code cell state
    runButton.innerHTML = '<i class="fa-solid fa-play" style="color: #0d9c29;"></i> <span>Run Code</span>';
  }

  // Add a click event listener to the run button
  runButton.onclick = function () {
    executeCode(editor.getValue());
  };
</script><button class="btn btn-default btn-webr" disabled="" type="button" id="webr-run-button-3">🟡 Loading
  webR...</button>
<div id="webr-editor-3"></div>
<div id="webr-code-output-3" aria-live="assertive">
  <pre style="visibility: hidden"></pre>
</div>
<script type="module">
  // Retrieve webR code cell information
  const runButton = document.getElementById("webr-run-button-3");
  const outputDiv = document.getElementById("webr-code-output-3");
  const editorDiv = document.getElementById("webr-editor-3");

  // Add a light grey outline around the code editor
  editorDiv.style.border = "1px solid #eee";

  // Load the Monaco Editor and create an instance
  let editor;
  require(['vs/editor/editor.main'], function () {
    editor = monaco.editor.create(editorDiv, {
      value: `par(bg = "#f7f7f7")

set.seed(2)
x <- rnorm(100)
boxplot(x)`,
      language: 'r',
      theme: 'vs-light',
      automaticLayout: true,           // TODO: Could be problematic for slide decks
      scrollBeyondLastLine: false,
      minimap: {
        enabled: false
      },
      fontSize: '17.5rem',               // Bootstrap is 1 rem
      renderLineHighlight: "none",     // Disable current line highlighting
      hideCursorInOverviewRuler: true  // Remove cursor indictor in right hand side scroll bar
    });

    // Dynamically modify the height of the editor window if new lines are added.
    let ignoreEvent = false;
    const updateHeight = () => {
      const contentHeight = editor.getContentHeight();
      // We're avoiding a width change
      //editorDiv.style.width = `${width}px`;
      editorDiv.style.height = `${contentHeight}px`;
      try {
        ignoreEvent = true;

        // The key to resizing is this call
        editor.layout();
      } finally {
        ignoreEvent = false;
      }
    };

    // Helper function to check if selected text is empty
    function isEmptyCodeText(selectedCodeText) {
      return (selectedCodeText === null || selectedCodeText === undefined || selectedCodeText === "");
    }

    // Registry of keyboard shortcuts that should be re-added to each editor window
    // when focus changes.
    const addWebRKeyboardShortCutCommands = () => {
      // Add a keydown event listener for Shift+Enter to run all code in cell
      editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {

        // Retrieve all text inside the editor
        executeCode(editor.getValue());
      });

      // Add a keydown event listener for CMD/Ctrl+Enter to run selected code
      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.Enter, () => {

        // Get the selected text from the editor
        const selectedText = editor.getModel().getValueInRange(editor.getSelection());
        // Check if no code is selected
        if (isEmptyCodeText(selectedText)) {
          // Obtain the current cursor position
          let currentPosition = editor.getPosition();
          // Retrieve the current line content
          let currentLine = editor.getModel().getLineContent(currentPosition.lineNumber);

          // Propose a new position to move the cursor to
          let newPosition = new monaco.Position(currentPosition.lineNumber + 1, 1);

          // Check if the new position is beyond the last line of the editor
          if (newPosition.lineNumber > editor.getModel().getLineCount()) {
            // Add a new line at the end of the editor
            editor.executeEdits("addNewLine", [{
            range: new monaco.Range(newPosition.lineNumber, 1, newPosition.lineNumber, 1),
            text: "\n", 
            forceMoveMarkers: true,
            }]);
          }
          
          // Run the entire line of code.
          executeCode(currentLine);

          // Move cursor to new position
          editor.setPosition(newPosition);
        } else {
          // Code to run when Ctrl+Enter is pressed with selected code
          executeCode(selectedText);
        }
      });
    }

    // Register an on focus event handler for when a code cell is selected to update
    // what keyboard shortcut commands should work.
    // This is a workaround to fix a regression that happened with multiple
    // editor windows since Monaco 0.32.0 
    // https://github.com/microsoft/monaco-editor/issues/2947
    editor.onDidFocusEditorText(addWebRKeyboardShortCutCommands);

    // Register an on change event for when new code is added to the editor window
    editor.onDidContentSizeChange(updateHeight);

    // Manually re-update height to account for the content we inserted into the call
    updateHeight();
  });

  // Function to execute the code (accepts code as an argument)
  async function executeCode(codeToRun) {
    // Disable run button for code cell active
    runButton.disabled = true;

    // Disallowing execution of other code cells
    document.querySelectorAll(".btn-webr").forEach((btn) => {
      btn.disabled = true;
    });

    // Emphasize the active code cell
    runButton.innerHTML = '<i class="fa-solid fa-spinner fa-spin" style="color: #7894c4;"></i> <span>Run Code</span>';

    // Create a canvas variable for graphics
    let canvas = undefined;

    // Initialize webR
    await globalThis.webR.init();

    // Setup a webR canvas by making a namespace call into the {webr} package
    await webR.evalRVoid("webr::canvas(width=504, height=360)");

    // Capture output data from evaluating the code
    const result = await webRCodeShelter.captureR(codeToRun, {
      withAutoprint: true,
      captureStreams: true,
      captureConditions: false//,
      // env: webR.objs.emptyEnv, // maintain a global environment for webR v0.2.0
    });

    // Start attempting to parse the result data
    try {

      // Stop creating images
      await webR.evalRVoid("dev.off()");

      // Merge output streams of STDOUT and STDErr (messages and errors are combined.)
      const out = result.output.filter(
        evt => evt.type == "stdout" || evt.type == "stderr"
      ).map((evt) => evt.data).join("\n");

      // Clean the state
      const msgs = await webR.flush();

      // Output each image stored
      msgs.forEach(msg => {
        // Determine if old canvas can be used or a new canvas is required.
        if (msg.type === 'canvas'){
          // Add image to the current canvas
          if (msg.data.event === 'canvasImage') {
            canvas.getContext('2d').drawImage(msg.data.image, 0, 0);
          } else if (msg.data.event === 'canvasNewPage') {
            // Generate a new canvas element
            canvas = document.createElement("canvas");
            canvas.setAttribute("width", 2 * 504);
            canvas.setAttribute("height", 2 * 360);
            canvas.style.width = "700px";
            canvas.style.display = "block";
            canvas.style.margin = "auto";
          }
        }
      });

      // Nullify the outputDiv of content
      outputDiv.innerHTML = "";

      // Design an output object for messages
      const pre = document.createElement("pre");
      if (/\S/.test(out)) {
        // Display results as text
        const code = document.createElement("code");
        code.innerText = out;
        pre.appendChild(code);
      } else {
        // If nothing is present, hide the element.
        pre.style.visibility = "hidden";
      }
      outputDiv.appendChild(pre);

      // Place the graphics on the canvas
      if (canvas) {
        const p = document.createElement("p");
        p.appendChild(canvas);
        outputDiv.appendChild(p);
      }
    } finally {
      // Clean up the remaining code
      webRCodeShelter.purge();
    }

    // Switch to allowing execution of code
    document.querySelectorAll(".btn-webr").forEach((btn) => {
      btn.disabled = false;
    });

    // Revert to the initial code cell state
    runButton.innerHTML = '<i class="fa-solid fa-play" style="color: #0d9c29;"></i> <span>Run Code</span>';
  }

  // Add a click event listener to the run button
  runButton.onclick = function () {
    executeCode(editor.getValue());
  };
</script><p>技术详情可以参阅 <a href="https://quarto-webr.thecoatlessprofessor.com/">quarto-webr 拓展文档</a>。 目前该插件（包括 webR）还在积极的开发中，期待未来更加成熟稳定，跟本地执行代码一样方便和容易， 我相信这会极大地改变开发者和使用者的交互方式。</p>



 ]]></description>
  <category>R</category>
  <guid>https://shixiangwang.github.io/posts/2023-10-09-webr-in-quarto/index.html</guid>
  <pubDate>Sun, 08 Oct 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>2023 年诺贝尔生理或医学奖授予 KK</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-10-09-kk-nobel/index.html</link>
  <description><![CDATA[ 




<p>匈牙利科学家Katalin Karikó和美国科学家Drew Weissman获得了2023年诺贝尔生理学奖或医学奖，因为他们在核苷酸碱基修饰方面的发现，使得开发出针对COVID-19的有效mRNA疫苗成为可能。</p>
<p>虽然处于生物医学领域，但对于 mRNA 疫苗也只是耳闻，而没有细致去了解过。真正让我着力写下这篇记录的，是Katalin Karikó几十年跌宕起伏的科研生涯，这给予我莫大的震撼和感动。 在流量的推荐下我也刷到了两位获奖者的采访视频，相比于Drew Weissman的沉稳冷静，KK溢于言表的热情和笑容让我再次深刻感受到科学研究的魅力。</p>
<p>我似乎能够通过附着在KK身上的岁月痕迹去窥探未来我可能的命运，当然，我并不是说我能够产生巨大的科学贡献并幸运地荣获这类科学大奖。 我在思考的是，我该用如何的态度去面对未来不确定的职业道路，如何去探寻和坚持未来想做的工作、去感受生活的起落、去陪伴爱人家人、去教育子女。 人是一种复杂的多细胞生物，在岁月的成长中，我们引入了太多物质与精神的变量，但所谓“不忘初心”的，不是回到多少年前某个幼稚的思考、充满天真梦想的时刻， 而是坚持一种贯穿身心与时空的信念和力量，让自我的“神迹”绽放在心灵的沃野，完成一场超脱自我的“成佛”之旅。</p>
<p>最后用 KK 讲述的一段话作为你我的共勉：</p>
<blockquote class="blockquote">
<p>涉足科学领域，你会经常在毫无把握的情况下工作。我经常把做科学比作我女儿的划船：你在一艘向后行驶的船上，看不清鱼鳍线有多远（卡里科的女儿苏珊·弗朗西亚是两届奥运会赛艇冠军和金牌得主）。所以我认为，激情、专注和使命感是在研究生涯中取得成就的关键因素。</p>
</blockquote>



 ]]></description>
  <category>academic</category>
  <category>news</category>
  <category>personal</category>
  <guid>https://shixiangwang.github.io/posts/2023-10-09-kk-nobel/index.html</guid>
  <pubDate>Sun, 08 Oct 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>ShowMeAI 速查表</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-10-07-show-me-ai-cheatsheet/index.html</link>
  <description><![CDATA[ 




<p>#分享# #AI# 今天看到 showmeAI（<a href="https://github.com/ShowMeAI-Hub" class="uri">https://github.com/ShowMeAI-Hub</a>），有一些速查表非常不错，这里整理分享给大家。 <a href="https://www.aliyundrive.com/s/mogzKzDSinf" class="uri">https://www.aliyundrive.com/s/mogzKzDSinf</a> 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p>



 ]]></description>
  <category>machine-learning</category>
  <category>Python</category>
  <category>resource</category>
  <guid>https://shixiangwang.github.io/posts/2023-10-07-show-me-ai-cheatsheet/index.html</guid>
  <pubDate>Fri, 06 Oct 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Shiny 开发学习路径</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-09-13-shiny-learning-path-for-bioinformatics/index.html</link>
  <description><![CDATA[ 




<p>生信领域越来越多的数据库/网页工具采用 <a href="https://shiny.posit.co/">Shiny</a> 框架进行搭建，Shiny 的流行度/拓展性在随着时间增加。因此，掌握 Shiny 服务于自己的项目/课题成为生信人的一个新的技能。 在这篇文章中，作为一个有经验的 Shiny 学习者和 Shiny 工具的开发者，我将介绍学习和掌握 Shiny 进行开发的核心路径和相关推荐的（免费）资料。对于每一个关卡（技能点）， 我会给出大致的（<strong>全职学习</strong>）时间估计（以周为单位）。</p>
<blockquote class="blockquote">
<p>网络上的资料对于个人来说是无穷尽的，我会尽量选择我认可的最核心读物，方便大家进行相关的学习。当然， 个人的能力有限，欢迎讨论和补充。</p>
<p>注意，Shiny 现在已经支持了 Python 的实现，但本文只介绍以 R 为基础的学习路径。</p>
</blockquote>
<section id="关卡1r-基础2-3-周" class="level2">
<h2 class="anchored" data-anchor-id="关卡1r-基础2-3-周">关卡1：R 基础（2-3 周）</h2>
<p>学习 <a href="https://r4ds.had.co.nz/"><em>R for Data Science</em></a>。</p>
<p><img src="https://shixiangwang.github.io/posts/2023-09-13-shiny-learning-path-for-bioinformatics/https:/d33wubrfki0l68.cloudfront.net/b88ef926a004b0fce72b2526b0b5c4413666a4cb/24a30/cover.png" class="img-fluid"></p>
<p>要求掌握 1-21 章的全部内容，后续章节初学者以了解为主，根据兴趣和时间进行实践。</p>
<p>核心要点：</p>
<ul>
<li>tidyverse 的数据处理理念</li>
<li>readr 读取操作</li>
<li>dplyr 数据处理理念和核心操作</li>
<li>ggplot2 可视化理念和核心操作</li>
</ul>
<p>读者目标自查：可以独自完成从磁盘读取文件、过滤/转换数据、分组处理/聚合数据、生成可视化图表。</p>
</section>
<section id="关卡2-网页基础-html5css-0.5-1-周" class="level2">
<h2 class="anchored" data-anchor-id="关卡2-网页基础-html5css-0.5-1-周">关卡2: 网页基础 HTML5/CSS （0.5-1 周）</h2>
<p>阅读一遍 <a href="https://www.runoob.com/html/html-tutorial.html">HTML 教程</a> 和 <a href="https://www.runoob.com/css/css-tutorial.html">CSS 教程</a>。</p>
<p>HTML 教程是重点，建议花多一些时间阅读；CSS 起到辅助和美化的作用，对于初学者，了解其基本语法、如何设定即可。</p>
<p>核心要点：</p>
<ul>
<li>网页结构</li>
<li>网页标签语法以及条目</li>
<li>CSS 的设定</li>
</ul>
<p>读者目标自查：可以徒手写一个简单的网页，并通过 CSS 引入一些格式化。</p>
</section>
<section id="关卡3shiny-学习2-3-周" class="level2">
<h2 class="anchored" data-anchor-id="关卡3shiny-学习2-3-周">关卡3：Shiny 学习（2-3 周）</h2>
<p>学习 <a href="https://mastering-shiny.org/"><em>Mastering Shiny</em></a>。</p>
<p><img src="https://shixiangwang.github.io/posts/2023-09-13-shiny-learning-path-for-bioinformatics/https:/d33wubrfki0l68.cloudfront.net/0c97eee3d8fc820f3a8d670c08b286e8a524257b/e426c/cover.png" class="img-fluid"></p>
<p>要求认真阅读全部内容，并根据读物的代码进行实践，边学边练。</p>
<p>核心要点：</p>
<ul>
<li>Shiny app 结构</li>
<li>Shiny 网页布局</li>
<li>Shiny reactivity</li>
<li>Shiny module</li>
</ul>
<p>读者目标自查：可以在关卡1的基础上，将可视化展示通过 Shiny app 实现，并提供多个选项用于控制图形的输出展示。</p>
</section>
<section id="关卡4-学习如何组织-shiny-app-代码1-周以上" class="level2">
<h2 class="anchored" data-anchor-id="关卡4-学习如何组织-shiny-app-代码1-周以上">关卡4: 学习如何组织 Shiny app 代码（1 周以上）</h2>
<p>好的代码结构，会极大地方便运维和拓展你写的 Shiny app。 下面有几种推荐的代码组织形式，读者可以根据自己的需求参考设定，也可以根据罗列的资料逐步学习。</p>
<ul>
<li>Shiny 默认的代码部署方式
<ul>
<li>使用一个 <code>app.R</code> 文件存储全部的前后端代码，适合非常小的应用。</li>
<li>使用单独的 <code>ui.R</code> 和 <code>server.R</code> 文件放前后端代码，适合稍微复杂一点的小应用。</li>
<li>在以上两种设定的基础上，将复杂的操作逻辑统统整理为函数，放到单独的 <code>R/</code> 目录下或者一个 <code>functions.R</code> 文件中方便调用和维护。如果更复杂一点，可以整理为一个 R 包，需要通过 <a href="https://r-pkgs.org/"><em>R Packages</em></a> 学习如何开发 R 包。</li>
</ul></li>
<li>使用 <a href="https://github.com/ThinkR-open/golem">golem</a> 框架，学习 <a href="https://engineering-shiny.org/index.html"><em>Engineering Production-Grade Shiny Apps</em></a></li>
<li>使用 <a href="https://github.com/Appsilon/rhino">rhino</a> 框架，通过 <a href="https://appsilon.github.io/rhino/">官方各种文档</a> 学习。</li>
</ul>
<p>读者目标自查：理解和熟练掌握 Shiny 默认的代码部署方式。</p>
</section>
<section id="关卡5-学习如何部署-shiny-app1-2-周" class="level2">
<h2 class="anchored" data-anchor-id="关卡5-学习如何部署-shiny-app1-2-周">关卡5: 学习如何部署 Shiny app（1-2 周）</h2>
<p>当你开发的 app 可用时，接下来就是进行部署，方便自己测试或者他人使用。有以下几种部署的方式：</p>
<ol type="1">
<li>通过 Posit 公司提供的 <a href="https://www.shinyapps.io/">shinyapps 服务</a>。推荐初学者尝试和摸索。</li>
<li>自己在本地的/云服务商的 Linux 服务器上进行部署，需要了解 Linux 系统并掌握 Linux 的基本操作（阅读 <a href="https://seankross.com/the-unix-workbench/">The Unix Workbench</a>）。具体的部署可以参考以下几篇文章：
<ol type="1">
<li><a href="https://mp.weixin.qq.com/s/f8QWD8RH6MTfvHSd57t2FQ"><em>在Ubuntu服务器上配置Shiny应用</em></a></li>
<li><a href="https://www.linode.com/docs/guides/how-to-deploy-rshiny-server-on-ubuntu-and-debian"><em>How to Deploy Interactive R Apps with Shiny Server</em></a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-shiny-server-on-ubuntu-20-04"><em>How To Set Up Shiny Server on Ubuntu 20.04</em></a></li>
</ol></li>
</ol>
<p>读者目标自查：掌握第 1 种应用部署方式；探索第 2 种部署方式并能解决遇到的问题。</p>
</section>
<section id="关卡6-学习和重现完整的-shiny-app2周以上" class="level2">
<h2 class="anchored" data-anchor-id="关卡6-学习和重现完整的-shiny-app2周以上">关卡6: 学习和重现完整的 Shiny app（2周以上）</h2>
<p>这是最后一道关口，闯关意味着你具备了独立完成 app 开发的能力。大家（特别是初学者）需要谨记，一个好的 app 在于它的代码结构清晰、能够完成任务，不在于漂亮的 UI。 所有的功能实现应当把完成分析/可视化目标为第一位，然后再花时间探索具体的 UI 美化。</p>
<p>由于各类读者背景和需求不一致，我这里只做一些通用的学习资料推荐，针对读者所在领域的 app 开发，需要读者自行了解和掌握相关知识背景、分析技能，在此基础上寻找一些已经通过 Shiny 实现的数据库/工具的源代码仓库进行学习。</p>
<ul>
<li>Shiny examples: <a href="https://github.com/rstudio/shiny-examples" class="uri">https://github.com/rstudio/shiny-examples</a></li>
<li>Shiny gallery：<a href="https://shiny.posit.co/r/gallery/" class="uri">https://shiny.posit.co/r/gallery/</a>。官方提供了很多功能特性的 app 实现。</li>
<li>Shiny Data Portal: <a href="https://github.com/SebKrantz/shiny-data-portal" class="uri">https://github.com/SebKrantz/shiny-data-portal</a>。A free Shiny Application to host, filter, aggregate and and download data in various formats.</li>
<li>machLearn, Machine learning dashboard created with R/shiny: <a href="https://github.com/davesteps/machLearn" class="uri">https://github.com/davesteps/machLearn</a></li>
<li>Shiny app for customizing Raincloud plots: <a href="https://github.com/gabrifc/raincloud-shiny" class="uri">https://github.com/gabrifc/raincloud-shiny</a></li>
</ul>
</section>
<section id="推荐资料" class="level2">
<h2 class="anchored" data-anchor-id="推荐资料">推荐资料</h2>
<p>在本文中，我尽量避免推荐比较多的资料，因为对于初学者过多的资料带来的是混淆与压力。我希望你能够通过上述的关卡真正有效地学习和掌握 Shiny 开发的知识要点，并应用于你感兴趣的项目中去。 作为本文的最后一部分，我将提供一些非常重要的资源地址，希望在你困惑或者想要学习更多内容时找到灵感！</p>
<ul>
<li><a href="https://github.com/veeps/shiny_workshop" class="uri">https://github.com/veeps/shiny_workshop</a></li>
<li><a href="https://github.com/grabear/awesome-rshiny" class="uri">https://github.com/grabear/awesome-rshiny</a></li>
<li><a href="https://github.com/nanxstats/awesome-shiny-extensions" class="uri">https://github.com/nanxstats/awesome-shiny-extensions</a></li>
<li><a href="https://github.com/davidruvolo51/shinyAppTutorials" class="uri">https://github.com/davidruvolo51/shinyAppTutorials</a></li>
<li><a href="https://github.com/daattali/advanced-shiny" class="uri">https://github.com/daattali/advanced-shiny</a></li>
</ul>
<p>Enjoy playing with Shiny!</p>


</section>

 ]]></description>
  <category>shiny</category>
  <category>R</category>
  <category>bioinformatics</category>
  <guid>https://shixiangwang.github.io/posts/2023-09-13-shiny-learning-path-for-bioinformatics/index.html</guid>
  <pubDate>Tue, 12 Sep 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>检查 CPU 的使用量</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-09-13-check-cpu-usage/index.html</link>
  <description><![CDATA[ 




<p>在 Linux 服务器上有时候需要检查下 CPU 的使用量，现在一般 server 的 CPU 都比较多，而在计算的时候 CPU 也是在动态切换的，像 htop 这种命令输出可以直观的看大体有多少被占用，但没法得到具体的数值。 而传统的指标 cpu load，一般也不太会去看，我们在运算时想的是尽量占用剩余的 CPU，所以如果能够得到比较直观的数字比较好。下面是一个 bash 函数，可以放到 <code>~/.bashrc</code> 中去。 也可以直接在 Shell 中运行。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu()</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb1-2">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">top</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-bn2</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%Cpu'</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tail</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grep</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-P</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'(....|...) id,'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">|</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">awk</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{print "CPU Usage: " 100-$8 "%"}'</span></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>具体的解释可以看来源文章：https://www.baeldung.com/linux/get-cpu-usage</p>



 ]]></description>
  <category>Linux</category>
  <category>bioinformatics</category>
  <category>note</category>
  <guid>https://shixiangwang.github.io/posts/2023-09-13-check-cpu-usage/index.html</guid>
  <pubDate>Tue, 12 Sep 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>MAPQ（映射质量）与-AS（比对得分）</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-09-12-mapq-and-as/index.html</link>
  <description><![CDATA[ 




<p>今天看 bwa mem 的 <code>-q</code> 选项，非常困惑：“-q, Don’t reduce the mapping quality of split alignment of lower alignment score”。 与我原来想象中 mapping quality 和 alignment score 两个东西应该相同所不同的是，我查询后发现这的确是两个不同的概念。</p>
<p>mapping quality (MAPQ) 是告诉你某一个 read 来自某一个基因组区域的可靠程度（可信度），而 alignment score（AS）告诉你的是这个序列与参考序列有多相似（生信图书/教程中一般说的比对算法得分就是这个），匹配的多得分就高。</p>
<p>如果你的 reads 完美的匹配到了多个基因组区域，那 AS 就会高但是 MAPQ 会低，如果你的 reads 有一些错配之类的，但匹配到某些位点的可信度比其他位点高，那么 AS 会低，但 MAPQ 会高。</p>
<blockquote class="blockquote">
<p>参考： https://www.biostars.org/p/179457/</p>
</blockquote>
<section id="更多阅读" class="level3">
<h3 class="anchored" data-anchor-id="更多阅读">更多阅读</h3>
<ul>
<li>https://genome.cshlp.org/content/suppl/2008/09/26/gr.078212.108.DC1/maq-supp.pdf</li>
<li>https://bioinformatics.stackexchange.com/questions/2417/meaning-of-bwa-mem-mapq-scores</li>
<li>https://maq.sourceforge.net/qual.shtml</li>
<li>https://support.illumina.com/content/dam/illumina-support/help/Illumina_DRAGEN_Bio_IT_Platform_v3_7_1000000141465/Content/SW/Informatics/Dragen/TPipelineMAPQ_fDG.htm</li>
<li>https://blog.csdn.net/tanzuozhev/article/details/89115080</li>
</ul>


</section>

 ]]></description>
  <category>bioinformatics</category>
  <guid>https://shixiangwang.github.io/posts/2023-09-12-mapq-and-as/index.html</guid>
  <pubDate>Mon, 11 Sep 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>discourse on the method</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-09-04-discourse-on-the-method/index.html</link>
  <description><![CDATA[ 




<p>笛卡尔在《方法论》中揭示了科学研究和发明创造的普适方法，并概括为 4 个步骤：</p>
<ol type="1">
<li>不盲从，不接受任何自己不清楚的真理。不管什么权威的结论，只要没有经过自己的研究，都可以怀疑。</li>
<li>化繁为简、化整为零。</li>
<li>解决小问题时，按照先易后难的次序，逐步解决。</li>
<li>解决全部小问题后，综合看是否解决了原来的问题。</li>
</ol>
<p>科学发展的规律为：</p>
<ol type="1">
<li>提出问题</li>
<li>进行实验</li>
<li>从实验中得到结论并解释</li>
<li>将结论推广并普遍化</li>
<li>在实践中找出新的问题</li>
</ol>
<blockquote class="blockquote">
<p>来源： 吴军 —— 《全球科技通史》</p>
</blockquote>



 ]]></description>
  <category>academic</category>
  <category>note</category>
  <category>thought</category>
  <guid>https://shixiangwang.github.io/posts/2023-09-04-discourse-on-the-method/index.html</guid>
  <pubDate>Sun, 03 Sep 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>circRNA鉴定流程-使用手册</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/index.html</link>
  <description><![CDATA[ 




<p>本系统提供了一个使用四种方法（CIRIquant、Circexplorer2、find_circ和circRNA_finder）从转录组双端测序的FASTQ文件中轻松且可重复地检测环状RNA（circRNA）的计算流程。</p>
<section id="功能特性" class="level2">
<h2 class="anchored" data-anchor-id="功能特性">功能特性</h2>
<ul>
<li>多方法鉴定和整合</li>
<li>并行计算支持</li>
<li>断点续跑</li>
<li>结果整合和规整化输出</li>
<li>日志记录</li>
</ul>
</section>
<section id="准备工作" class="level2">
<h2 class="anchored" data-anchor-id="准备工作">准备工作</h2>
<section id="操作系统环境" class="level3">
<h3 class="anchored" data-anchor-id="操作系统环境">操作系统环境</h3>
<p>本系统需要运行在 Linux 系统环境中（不限发行版本，测试系统包括 Ubuntu、CentOS）。 需要用户知道如何操作 Linux 系统。</p>
</section>
<section id="步骤1.-安装所需的conda环境" class="level3">
<h3 class="anchored" data-anchor-id="步骤1.-安装所需的conda环境">步骤1. 安装所需的conda环境</h3>
<ol type="1">
<li><p>（可选）创建一个名为’circrna’的独立Linux帐户，用于部署和运行循环RNA识别流程。</p></li>
<li><p>安装<a href="https://docs.conda.io/en/latest/miniconda.html">miniconda3</a>到默认路径，即<code>~/miniconda3</code>。 如果按照上述推荐设置，conda应该可在<code>/home/circrna/miniconda3</code>处使用。</p></li>
<li><p>使用<code>conda install -n base --override-channels -c conda-forge mamba 'python_abi=*=*cp*'</code>将<a href="https://mamba.readthedocs.io/en/latest/installation.html">mamba</a>安装到<code>base</code>环境中。</p></li>
<li><p>使用以下命令安装<a href="https://just.systems/">just</a>：<code>curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/bin</code>。请将<code>~/bin</code>添加到您的<code>$PATH</code>中。 您可以将<code>~/bin</code>更改为任何位置，但在进入终端时需要使<code>just</code>可用。</p></li>
<li><p>安装<a href="https://github.com/shenwei356/rush">rush</a>并将其路径添加到<code>$PATH</code>，类似于<code>just</code>。</p></li>
<li><p>（可选）如果需要，设置conda和pypi（pip）的注册表。例如，如果您在中国，我建议使用以下链接进行设置：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a> 和 <a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">https://mirrors.tuna.tsinghua.edu.cn/help/pypi/</a>。</p></li>
<li><p>使用本软著提供的代码，并切换到代码目录。</p></li>
<li><p>按顺序安装conda环境。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> circrna-pipeline</span>
<span id="cb1-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> CIRIquant</span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">just</span> install</span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ../FindCirc</span>
<span id="cb1-5"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">just</span> install</span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ../Circexplorer2</span>
<span id="cb1-7"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">just</span> install</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ../circRNA_finder</span>
<span id="cb1-9"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">just</span> install</span></code></pre></div></li>
</ol>
<p>请确保已创建所有conda环境并安装了所需的软件。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903160124763.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903160124763</figcaption>
</figure>
</div>
</section>
<section id="步骤2.-准备比对索引参考文件和配置文件" class="level3">
<h3 class="anchored" data-anchor-id="步骤2.-准备比对索引参考文件和配置文件">步骤2. 准备比对索引、参考文件和配置文件</h3>
<p>要运行流程，需要准备好一些参考数据文件。</p>
<ol type="1">
<li><p>准备基因组fasta文件和gtf文件。我们使用<code>GRCh38.primary_assembly.genome.fa</code>和<code>gencode.v34.annotation.gtf</code>。</p></li>
<li><p>对于Circexplorer2，您需要使用<code>Circexplorer2</code>环境中的<code>fetch_ucsc.py</code>脚本下载参考文件<code>hg38_ref_all.txt</code>（应与您的参考基因组相对应）。</p></li>
<li><p>准备比对索引，<a href="config_zhou.sh">config_zhou.sh</a>中记录了命令和配置，截图如下。</p>
<img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903160258992.png" class="img-fluid" alt="image-20230903160258992">
<p>请注意，在运行索引命令之前，您需要激活相应的环境。</p>
<p>例如，为CIRIquant准备索引。 <code>sh  source activate CIRIquant  bwa index -a bwtsw -p /path/to/GRCh38.primary_assembly.genome.fa /path/to/GRCh38.primary_assembly.genome.fa  hisat2-build -p 40 /path/to/GRCh38.primary_assembly.genome.fa /path/to/GRCh38.primary_assembly.genome.fa</code></p></li>
<li><p>对于CIRIquant，需要一个<code>yml</code>文件来设置软件和文件的路径，例如hg38.yml (CIRIquant/hg38.yml，截图如下)。您需要修改内容以适应您的设置（也可以创建另一个<code>yml</code>文件）。</p>
<img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903160451460.png" class="img-fluid" alt="image-20230903160451460"></li>
<li><p>设置一个<code>config.sh</code>文件，它使用SHELL变量设置了所有必需的设置，config_zhou.sh (config_zhou.sh) 是一个很好的参考（当然，您可以根据需要修改其内容）。</p>
<img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903160258992.png" class="img-fluid" alt="image-20230903160258992"></li>
</ol>
</section>
</section>
<section id="使用流程" class="level2">
<h2 class="anchored" data-anchor-id="使用流程">使用流程</h2>
<section id="预处理转录组双端测序的-fastq-文件" class="level3">
<h3 class="anchored" data-anchor-id="预处理转录组双端测序的-fastq-文件">预处理转录组双端测序的 fastq 文件</h3>
<p>这一部分的代码存储在 qc 和common目录下面，我们提供了 <code>md5check.sh</code> 方便用户对自己的数据进行 md5 完整性检查，确保数据完整后可以开始进行数据的预处理步骤，包括质控、去除双端的人为标记序列（adapters）。用户输入的文件后缀需要确保为<code>_1.fastq.gz</code>和<code>_2.fastq.gz</code>。示例文件列表截图如下，红色框选了文件后缀。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903160856615.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903160856615</figcaption>
</figure>
</div>
<p>完成后可以进行预处理操作，下面提供了示例的 Shell 脚本。</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#!/usr/bin/env bash</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 指定软件路径</span></span>
<span id="cb2-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">py</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/home/circrna/miniconda3/bin/python3</span>
<span id="cb2-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fp</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/home/circrna/miniconda3/bin/fastp</span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 指定代码目录</span></span>
<span id="cb2-7"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">PIPELINE</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/home/circrna/circrna-pipeline</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 指定输入、输出路径</span></span>
<span id="cb2-10"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fqfile</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>./sample_list.txt</span>
<span id="cb2-11"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">indir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/path/to/input</span>
<span id="cb2-12"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oudir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/path/to/output</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 配置 CPU 数目</span></span>
<span id="cb2-15"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nthreads</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>20</span>
<span id="cb2-16"></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 调用脚本生成输入目录下的样本 ID 列表</span></span>
<span id="cb2-18"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${py}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PIPELINE}</span>/common/ll_fq.py <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${indir}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${fqfile}</span></span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 调用预处理命令到后台运行，并将运行的日志导出到 test_qc.log</span></span>
<span id="cb2-21"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nohup</span> bash <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${PIPELINE}</span>/qc/fp.sh <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${fqfile}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${indir}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${oudir}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${nthreads}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${fp}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&gt;</span> test_qc.log <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;</span></span></code></pre></div>
<p>下面截图展示了预处理的日志信息，最终会生成样本的质量检测报告（html文件）。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903161015118.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903161015118</figcaption>
</figure>
</div>
<p>报告文件截图：</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903161412806.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903161412806</figcaption>
</figure>
</div>
</section>
<section id="运行检测流程" class="level3">
<h3 class="anchored" data-anchor-id="运行检测流程">运行检测流程</h3>
<p>创建一个包含以下设置和命令的shell脚本。</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 指定输入、输出路径</span></span>
<span id="cb3-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">fqfile</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>./sample_list.txt</span>
<span id="cb3-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">indir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/path/include/paired/fastq/files</span>
<span id="cb3-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">oudir</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/path/to/output</span>
<span id="cb3-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">nthreads</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>20</span>
<span id="cb3-6"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">config</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>/path/to/your/config.sh</span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">common/ll_fq.py</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${indir}</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${fqfile}</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nohup</span> bash caller.sh <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${fqfile}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${indir}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${oudir}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${nthreads}</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">${config}</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&gt;</span> run.log <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;</span></span></code></pre></div>
<blockquote class="blockquote">
<p>必须在conda <code>base</code>环境中（或已安装<code>python3</code>的情况下）执行该脚本。 如果您已经自己准备了<code>sample_list.txt</code>文件。 您可以注释掉<code>common/ll_fq.py</code>这一行，然后可以在bash中运行该脚本 而无需任何其他要求（例如，不需要从<code>base</code>环境中安装<code>python3</code>）。</p>
</blockquote>
<p>我建议使用2个样本测试流程。如果一切顺利，然后运行您拥有的所有数据文件。流程将跳过已生成结果文件的样本。</p>
<p>日志截图：</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903162126629.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903162126629</figcaption>
</figure>
</div>
<p>如果运行出现中断，再次运行脚本/命令即可，流程会自动跳过已检测完成的样本。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903162238611.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903162238611</figcaption>
</figure>
</div>
</section>
<section id="检查检测输出结果" class="level3">
<h3 class="anchored" data-anchor-id="检查检测输出结果">检查检测输出结果</h3>
<p>输出目录包含根据样本名称和方法组合的结果文件。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903161627392.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903161627392</figcaption>
</figure>
</div>
<p>结果文件通常包含循环RNA的位置和计数值。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903161702141.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903161702141</figcaption>
</figure>
</div>
</section>
<section id="聚合结果" class="level3">
<h3 class="anchored" data-anchor-id="聚合结果">聚合结果</h3>
<p>上述生成了 4 种检测方法的单独结果，我们下一步需要对结果进行聚合，相关代码放在 aggr 目录下。</p>
<p><code>aggr_beds.R</code> 提供了对方法结果聚合的代码，示例运行命令为：</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./aggr/aggr_dataset.R</span> /path/to/result /path/to/aggr_output</span></code></pre></div>
<p>这样每一个样本都有一个聚合的结果文件。</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903161752469.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903161752469</figcaption>
</figure>
</div>
<p>进一步，用户还可以利用 <code>aggr_dataset.R</code> 对全部的样本（即整个输入数据集）结果生成一个整合结果。</p>
<p>调用命令为：</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">./aggr/aggr_dataset.R</span> /path/to/aggr_output /path/to/dataset_output</span></code></pre></div>
<p>最后结果会在 <code>/path/to/dataset_output</code> 生成 <code>aggr_output_circRNA.tsv.gz</code> 文件，这是一个大的压缩数据表格，包含以下一些列信息。</p>
<pre><code>id, symbol, strand, chrom, startUpBSE, endDownBSE, tool, samples...</code></pre>
<ul>
<li>id: circRNA 的唯一标记信息</li>
<li>symbol: 基因名</li>
<li>strand: 链信息</li>
<li>chrom: circRNA 染色体信息</li>
<li>startUpBSE: circRNA 染色体起点</li>
<li>endDownBSE: circRNA 染色体终点</li>
<li>tool: 方法标记</li>
<li>samples…：其他每列都对应处理的一个样本</li>
</ul>
<p>下面是测试生成的文件：</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903162442921.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903162442921</figcaption>
</figure>
</div>
<p>查看它的部分内容数据：</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/https:/cdn.jsdelivr.net/gh/shixiangwang/cdn/img/image-20230903162511289.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image-20230903162511289</figcaption>
</figure>
</div>
<p>用户可以利用流程不同的结果进行下游的分析和研究，包括：</p>
<ul>
<li>不同方法的检测结果</li>
<li>同一个样本不同方法检测的聚合结果</li>
<li>整个输入样本数据集的检测整合结果</li>
</ul>


</section>
</section>

 ]]></description>
  <category>bioinformatics</category>
  <guid>https://shixiangwang.github.io/posts/2023-09-03-use-circrna-pipeline/index.html</guid>
  <pubDate>Sat, 02 Sep 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>pnas</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-08-31-pnas/index.html</link>
  <description><![CDATA[ 




<p>想发一篇 PNAS，希望 3 年内能达成。</p>



 ]]></description>
  <category>random</category>
  <guid>https://shixiangwang.github.io/posts/2023-08-31-pnas/index.html</guid>
  <pubDate>Wed, 30 Aug 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>normalize data 和 scale data 的差异</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-08-17-normalize-and-scale-data/index.html</link>
  <description><![CDATA[ 




<p>“Normalize data” 和 “scale data” 都是数据预处理的步骤，但它们在具体操作和效果上有所不同。</p>
<p><strong>Normalize Data (数据归一化):</strong> 数据归一化是一种常见的预处理方法，用于将不同特征的数据调整到相同的尺度范围内。这有助于避免在模型训练中因为某些特征值范围较大而导致的模型收敛问题。通常，数据归一化意味着将数据缩放到0到1之间的范围，使其具有相似的尺度。常见的归一化方法包括最小-最大缩放、Z-得分标准化等。数据归一化通常不会改变数据的分布形状，只是将其映射到一个更统一的尺度。</p>
<p><strong>Scale Data (数据标准化):</strong> 数据标准化也是数据预处理的一部分，但它更注重将数据转换成特定的分布，通常是均值为0，标准差为1的正态分布。标准化后，数据的均值会接近0，标准差接近1，从而使得数据更适合一些要求数据服从正态分布的模型。标准化通常用于在特征之间的差异较大且可能对模型性能产生影响时。</p>
<p>因此，“normalize data” 侧重于将数据映射到相同的尺度范围内，而 “scale data” 则强调将数据调整为特定分布的形式，通常是标准正态分布。选择使用哪种方法取决于具体的问题和模型需求。</p>
<blockquote class="blockquote">
<p>问题是我问的，回答是 ChatGPT。我觉得很好。</p>
</blockquote>
<p>我继续问：“z score 变换不就是数据转换成特定的分布，通常是均值为0，标准差为1的正态分布？”</p>
<p>回答来了：</p>
<p>是的，您说得对。Z-score标准化（Z-score transformation）是一种常见的数据标准化方法，其目的正是将数据转换为均值为0，标准差为1的正态分布。这种标准化方法通过减去均值，然后除以标准差，使数据的分布接近标准正态分布。这有助于使数据适用于那些要求数据服从正态分布的模型，同时也有助于处理不同尺度和范围的特征，以提高模型的稳定性和效果。</p>
<p>在前面的回答中，我没有清晰地表达出 “scale data” 的概念，我混淆了 “normalize data” 和 Z-score标准化。非常抱歉对此造成了困扰。事实上，Z-score标准化就是 “scale data” 的一个具体示例，用于将数据进行标准化，使其符合均值为0，标准差为1的正态分布。</p>
<blockquote class="blockquote">
<p>看来机器人也有点懵。</p>
</blockquote>
<p>我们看看别人的回答，下面的比较对味：</p>
<p>One of the reasons that it’s easy to get confused between scaling and normalization is because the terms are sometimes used interchangeably and, to make it even more confusing, they are very similar! In both cases, you’re transforming the values of numeric variables so that the transformed data points have specific helpful properties. The difference is that:</p>
<p>in scaling, you’re changing the range of your data, while in normalization, you’re changing the shape of the distribution of your data.</p>
<p>为了尽量避免误读，我这里放了英文原文。感兴趣的可以看下 <a href="https://www.kaggle.com/code/alexisbcook/scaling-and-normalization/tutorial" class="uri">https://www.kaggle.com/code/alexisbcook/scaling-and-normalization/tutorial</a> 具体说明。</p>
<p>简而言之：</p>
<ul>
<li>scaling 改变数据取值范围（比如 min-max 变换，z-score 变换）。</li>
<li>normalization 改变数据的分布（如 log 变换）。</li>
</ul>



 ]]></description>
  <category>note</category>
  <category>stats</category>
  <guid>https://shixiangwang.github.io/posts/2023-08-17-normalize-and-scale-data/index.html</guid>
  <pubDate>Wed, 16 Aug 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>caddyfile</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-08-11-caddyfile/index.html</link>
  <description><![CDATA[ 




<p>Caddy 是一个反向代理工具，自动支持 https。 这里我记录下之前弄的代理配置，免得服务器到期了这段经验被遗忘掉了。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> cat /etc/caddy/Caddyfile </span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The Caddyfile is an easy way to configure your Caddy web server.</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Unless the file starts with a global options block, the first</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># uncommented line is always the address of your site.</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># To use your own domain name (with automatic HTTPS), first make</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sure your domain's A/AAAA DNS records are properly pointed to</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this machine's public IP, then replace ":80" below with your</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># domain name.</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#:80, 139.9.81.126:80 {</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   # Set this path to your site's directory.</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   #root * /usr/share/caddy</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   # Enable the static file server.</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   #file_server</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#        #tls self_signed</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   # Another common task is to set up a reverse proxy:</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   reverse_proxy localhost:8090</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   # Or serve a PHP site through php-fpm:</span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   # php_fastcgi localhost:9000</span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#}</span></span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">shixiangwang.work</span> {</span>
<span id="cb1-29"></span>
<span id="cb1-30">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">encode</span> gzip</span>
<span id="cb1-31">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reverse_proxy</span> localhost:8090</span>
<span id="cb1-32"></span>
<span id="cb1-33">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#handle_path /blog/zd* {</span></span>
<span id="cb1-34">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  reverse_proxy localhost:8091</span></span>
<span id="cb1-35">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#}</span></span>
<span id="cb1-36"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-37"></span>
<span id="cb1-38"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mia.shixiangwang.work</span> {</span>
<span id="cb1-39">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">encode</span> gzip</span>
<span id="cb1-40">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">reverse_proxy</span> localhost:8091</span>
<span id="cb1-41"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">love.shixiangwang.work</span> {</span>
<span id="cb1-44">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> /var/www/love</span>
<span id="cb1-45">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file_server</span></span>
<span id="cb1-46"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pybook.shixiangwang.work</span> {</span>
<span id="cb1-49">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> /var/www/pybook</span>
<span id="cb1-50">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file_server</span></span>
<span id="cb1-51"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">cookbook4r.shixiangwang.work</span> {</span>
<span id="cb1-54">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">root</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span> /var/www/Cookbook-for-R-Chinese/docs</span>
<span id="cb1-55">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">file_server</span></span>
<span id="cb1-56"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb1-57"></span>
<span id="cb1-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Refer to the Caddy docs for more information:</span></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://caddyserver.com/docs/caddyfile</span></span></code></pre></div>



 ]]></description>
  <category>note</category>
  <category>Linux</category>
  <guid>https://shixiangwang.github.io/posts/2023-08-11-caddyfile/index.html</guid>
  <pubDate>Thu, 10 Aug 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>Duplication Rate 经验值</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-08-01-duplication-rate/index.html</link>
  <description><![CDATA[ 




<p>最近处理 RNA-Seq 的原始数据，用 fastp 发现 duplication rate 很高，有不少 60% 的，比较奇怪。</p>
<p>搜索了下常见的值，记录一下。</p>
<section id="duplication-rate经验值" class="level2">
<h2 class="anchored" data-anchor-id="duplication-rate经验值">Duplication Rate经验值</h2>
<p>WES：数据量约10G时，Duplication rate在10%左右;</p>
<p>WGS：数据量约90G时，Duplication rate在10%左右;</p>
<p>RNA-seq：Duplication rate在40% ~ 50%左右;</p>
<p>WGBS：&gt;10G, Duplication rate &gt; 10%；</p>
<p>多重PCR试剂盒和靶向捕获Panel，差异很大，跟需要测序的区域以及测序量有关，通常情况下只要中靶部分数据质量足够好，Duplication rate不是一个重要的考虑指标。</p>
<blockquote class="blockquote">
<p>参考文章：https://zhuanlan.zhihu.com/p/635160066</p>
</blockquote>


</section>

 ]]></description>
  <category>note</category>
  <category>bioinformatics</category>
  <guid>https://shixiangwang.github.io/posts/2023-08-01-duplication-rate/index.html</guid>
  <pubDate>Mon, 31 Jul 2023 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
