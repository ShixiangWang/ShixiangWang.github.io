<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Reasoning</title>
<link>https://shixiangwang.github.io/index.html</link>
<atom:link href="https://shixiangwang.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>Reasoning is a blog dedicated to exploring the intersection of data science, bioinformatics, and personal insights.</description>
<generator>quarto-1.2.269</generator>
<lastBuildDate>Tue, 28 Mar 2023 16:00:00 GMT</lastBuildDate>
<item>
  <title>ChatGPT 帮助我理解 Rust 的所有权</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/2023-03-29-chatgpt-help-me-understand-rust-ownership/index.html</link>
  <description><![CDATA[ 




<p>这篇文章以我和 ChatGPT 的问答进行。</p>
<section id="怎么理解rust的所有权" class="level2">
<h2 class="anchored" data-anchor-id="怎么理解rust的所有权">怎么理解rust的所有权？</h2>
<p>Rust的所有权是其独特的内存管理系统，用于动态内存分配和释放。它基于以下原则：</p>
<ol type="1">
<li><p>每个值在任何时刻只能有一个所有者。</p></li>
<li><p>所有权只能转移，不能共享。</p></li>
<li><p>默认情况下，所有权的转移是按值而不是按引用进行的。</p></li>
</ol>
<p>这种所有权系统有助于避免内存泄漏、空引用和数据竞争等常见的错误。在Rust中，通过为每个值分配一个所有者来跟踪内存中的数据是如何使用的，每一个所有者离开作用域时，它拥有的值都会被销毁。因此，Rust所有权系统能够自动管理内存，而且无需额外的垃圾回收机制。这一特性让Rust成为一个高效、安全和可靠的编程语言。需要注意的是，所有权机制对于Rust的初学者来说是一个相对复杂的概念，需要一定的理解和实践才能更好地应用它并编写出高质量的Rust代码。</p>
</section>
<section id="怎么理解-所有权的主要目的就是为了管理堆数据" class="level2">
<h2 class="anchored" data-anchor-id="怎么理解-所有权的主要目的就是为了管理堆数据">怎么理解 所有权的主要目的就是为了管理堆数据？</h2>
<p>Rust中的所有权确实是用于管理堆数据的，因为堆数据是在运行时动态分配的，并且在内存中存在一定的问题，如内存泄漏、数据竞争等。因此需要一种机制来管理堆数据并解决这些问题。所有权机制可以确保在动态分配内存的情况下，内存得到正确的释放，每个heap上的数据有且仅有一个所有者对其进行管理，从而避免了数据竞争和其他常见的错误。</p>
<p>此外，Rust还使用采取堆管理的方式为其他类型的数据分配内存。例如，当一个Vector或String类型增长时，它们必须重新分配和复制所有的数据，同时保证新的数据具有唯一的所有者。这使得Rust的动态内存分配和释放机制非常高效、可靠和安全，在许多应用程序场景中可以提供非常好的性能。</p>
</section>
<section id="为什么所有权不是管理栈数据的呢" class="level2">
<h2 class="anchored" data-anchor-id="为什么所有权不是管理栈数据的呢">为什么所有权不是管理栈数据的呢？</h2>
<p>所有权的设计之所以没有涉及栈，是因为栈上的数据是随着当前作用域结束而自动释放的。栈上的数据的分配和释放是编译时完成的，编译器可以自己进行管理，从而不需要特别的内存管理机制。当在栈上分配数据时，其生命周期的结束是在编译器处理的代码块退出前的最后一个语句执行后就会自动发生。此时编译器会自动释放它们的空间，没有必要使用所有权。因此，所有权机制主要应用于需要在运行时动态分配内存的场景，例如堆上存储的大型数据结构、字符串、闭包等。相比于栈上的数据，堆上的数据需要更加灵活和高级的处理方式，所以所有权体系的设计针对的是动态内存的管理，而不是栈上的处理。</p>
</section>
<section id="所有权造成的操作障碍" class="level2">
<h2 class="anchored" data-anchor-id="所有权造成的操作障碍">所有权造成的操作障碍</h2>
<p>由于所有权的问题，Rust 变得安全有效，但对于开发者也造成了一些理解和操作问题。 例如，同一个<strong>堆数据</strong>（栈数据不会受到影响，因为它们在编译时已经被决定了，堆数据在运行时是可变的，所以才会有内存问题）不能指向两个不同的变量，当新的变量出现时，所有权被转移，之前的变量就无效无法使用了。</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb1-1"><span class="kw" style="color: #003B4F;">fn</span> main() <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;">let</span> s1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dt" style="color: #AD0000;">String</span><span class="pp" style="color: #AD0000;">::</span>from(<span class="st" style="color: #20794D;">"hello"</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-3">    <span class="kw" style="color: #003B4F;">let</span> s2 <span class="op" style="color: #5E5E5E;">=</span> s1<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="pp" style="color: #AD0000;">println!</span>(<span class="st" style="color: #20794D;">"{}, world!"</span><span class="op" style="color: #5E5E5E;">,</span> s1)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p><img src="https://shixiangwang.github.io/posts/2023-03-29-chatgpt-help-me-understand-rust-ownership/https:/kaisery.github.io/trpl-zh-cn/img/trpl04-04.svg" class="img-fluid"></p>
<p>为了生成两个拷贝，需要用到克隆。</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode rust code-with-copy"><code class="sourceCode rust"><span id="cb2-1"><span class="kw" style="color: #003B4F;">fn</span> main() <span class="op" style="color: #5E5E5E;">{</span></span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;">let</span> s1 <span class="op" style="color: #5E5E5E;">=</span> <span class="dt" style="color: #AD0000;">String</span><span class="pp" style="color: #AD0000;">::</span>from(<span class="st" style="color: #20794D;">"hello"</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-3">    <span class="kw" style="color: #003B4F;">let</span> s2 <span class="op" style="color: #5E5E5E;">=</span> s1<span class="op" style="color: #5E5E5E;">.</span>clone()<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-4"></span>
<span id="cb2-5">    <span class="pp" style="color: #AD0000;">println!</span>(<span class="st" style="color: #20794D;">"s1 = {}, s2 = {}"</span><span class="op" style="color: #5E5E5E;">,</span> s1<span class="op" style="color: #5E5E5E;">,</span> s2)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb2-6"><span class="op" style="color: #5E5E5E;">}</span></span></code></pre></div>
<p>这个 Rust 的 trait 设计也有关系（我理解就是实际的实现）</p>
<blockquote class="blockquote">
<p>Rust 有一个叫做 Copy trait 的特殊注解，可以用在类似整型这样的存储在栈上的类型上。如果一个类型实现了 Copy trait，那么一个旧的变量在将其赋值给其他变量后仍然可用。</p>
<p>Rust 不允许自身或其任何部分实现了 Drop trait 的类型使用 Copy trait。如果我们对其值离开作用域时需要特殊处理的类型使用 Copy 注解，将会出现一个编译时错误。</p>
<p>那么哪些类型实现了 Copy trait 呢？你可以查看给定类型的文档来确认，不过作为一个通用的规则，任何一组简单标量值的组合都可以实现 Copy，任何不需要分配内存或某种形式资源的类型都可以实现 Copy 。如下是一些 Copy 的类型：</p>
<p>所有整数类型，比如 u32。 布尔类型，bool，它的值是 true 和 false。 所有浮点数类型，比如 f64。 字符类型，char。 元组，当且仅当其包含的类型也都实现 Copy 的时候。比如，(i32, i32) 实现了 Copy，但 (i32, String) 就没有。</p>
</blockquote>
<p>变量的所有权总是遵循相同的模式：将值赋给另一个变量时移动它。当持有堆中数据值的变量离开作用域时，其值将通过 drop 被清理掉，除非数据被移动为另一个变量所有。</p>
<hr>
<p>参考：</p>
<ul>
<li><a href="https://kaisery.github.io/trpl-zh-cn/ch04-01-what-is-ownership.html" class="uri">https://kaisery.github.io/trpl-zh-cn/ch04-01-what-is-ownership.html</a></li>
</ul>


</section>

 ]]></description>
  <category>Rust</category>
  <category>AI</category>
  <guid>https://shixiangwang.github.io/posts/2023-03-29-chatgpt-help-me-understand-rust-ownership/index.html</guid>
  <pubDate>Tue, 28 Mar 2023 16:00:00 GMT</pubDate>
  <media:content url="https://kaisery.github.io/trpl-zh-cn/img/trpl04-04.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Shixiang Wang</dc:creator>
  <link>https://shixiangwang.github.io/posts/welcome/index.html</link>
  <description><![CDATA[ 




<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://shixiangwang.github.io/posts/welcome/thumbnail.jpg" class="img-fluid"></p>



 ]]></description>
  <category>news</category>
  <guid>https://shixiangwang.github.io/posts/welcome/index.html</guid>
  <pubDate>Mon, 27 Mar 2023 16:00:00 GMT</pubDate>
  <media:content url="https://shixiangwang.github.io/posts/welcome/thumbnail.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
